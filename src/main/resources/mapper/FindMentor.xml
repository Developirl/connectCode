<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="connectCode.mapper.FindMentorDAO">


	<!-- 필터를 포함한 총 데이터 수를 구한다. -->
	<select id="getTotal"
		parameterType="connectCode.model.FindMentorDTO" resultType="int">
		SELECT COUNT(DISTINCT m.mentor_no)
		FROM mentor m
		JOIN career c USING
		(mentor_no)
		<where>
			<if test="gender != null and gender != ''">
				AND gender = #{gender}
			</if>

			<if test="technology != null and technology != ''">
				AND (
				<foreach item="keyword" collection="technology.split(';')"
					separator=" OR ">
					technology LIKE CONCAT('%', #{keyword}, '%')
				</foreach>
				)
			</if>

			<if test="mentoring_location != null and mentoring_location != ''">
				AND TRIM(SUBSTRING_INDEX(mentoring_location, ' ', 1)) =
				#{mentoring_location}
			</if>

			<if test="years != 0">
				AND years >= #{years}
			</if>
		</where>
	</select>


	<!-- 멘토 리스트를 가져온다. -->
	<select id="getMentorList" parameterType="connectCode.model.FindMentorDTO"
		resultType="connectCode.model.FindMentorDTO">
		SELECT mentorList.* 
		FROM (
			SELECT filter.*, f.file_url, f.physical_name 
			FROM (
				SELECT DISTINCT m.*, c.years, c.company, c.task, c.entering_date 
				FROM mentor m JOIN career c USING (mentor_no)
						<where>
							m.classification = 23 
								<if test="gender != null and gender != ''">
									AND gender = #{gender}
								</if>
								<if test="technology != null and technology != ''">
									AND (
									<foreach item="keyword" collection="technology.split(';')"
										separator=" OR ">
										technology LIKE CONCAT('%', #{keyword}, '%')
									</foreach>
									)
								</if>
								<if test="mentoring_location != null and mentoring_location != ''">
									AND TRIM(SUBSTRING_INDEX(mentoring_location, ' ', 1)) =
									#{mentoring_location}
								</if>
					
								<if test="years != 0">
									AND years >= #{years}
								</if>
						</where>
				) AS filter 
				
				JOIN (
					SELECT mentor_no, MAX(entering_date) maxdate 
					FROM career 
					GROUP BY mentor_no
				) AS max_dates 
						ON filter.mentor_no = max_dates.mentor_no AND filter.entering_date = max_dates.maxdate 
				
				LEFT JOIN file f 
					ON filter.profile_img_no = f.file_no 
					ORDER BY filter.mentor_no DESC 
			) as mentorList
	</select>

	
	<!-- 멘토의 리뷰 수를 구한다. : 위 주석의 경우는 classification 설정을 안한 경우 -->
	<select id="getReviewcount" parameterType="int" resultType="int">
	 SELECT count(*) FROM 
		( SELECT * FROM review JOIN mentoring USING(mentoring_no) WHERE classification=35 ) a 
			JOIN mentee m USING(mentee_no)  
				JOIN service s USING(service_no) WHERE s.mentor_no = #{mentor_no}    
	</select>


	<!-- 멘토의 요금제를 가져온다. 20분 전화 멘토링;20000 -->
	<select id="getMentoringPayment" parameterType="int"
		resultType="java.lang.String">
		select concat(mentoring_kind,';',mentoring_fee,';',available_NY) from
		mentor
		join service using(mentor_no) where mentor_no=#{mentor_no}
	</select>

	<!-- 세션에 공유된 값이 있다면 해당 세션의 member_no 에서 가져온 mentee_no으로 북마크 체크 유무 비교 -->
	<select id="getCheckedBookmark" resultType="int">
		select count(*) from
		bookmark b left join (select mt.mentee_no,m.member_no
		from member m
		join mentee mt using(member_no)) a using(mentee_no)
		where
		a.member_no=#{member_no}
		and b.mentor_no=#{mentor_no}
	</select>
	
	<!--  멘토 디테일 페이지에서 멘토 프로필 정보 가져오는 쿼리문 -->
	<select id="getMentorProfile" parameterType="int" resultType="connectCode.model.FindMentorDTO">
	    SELECT a.mentor_no,f.file_url,f.physical_name,a.name,a.company,a.task,a.intro,a.mentoring_location  
		FROM 
			( SELECT * FROM mentor JOIN career USING(mentor_no) WHERE mentor_no = #{mentor_no} 
		ORDER BY 
			entering_date DESC LIMIT 1) a 
		LEFT JOIN 
			file f ON a.profile_img_no = f.file_no
	</select>
	
	<!--  멘토 경력사항 리스트  -->
	<select id="getCareerList" parameterType="int" resultType="FindMentorInfoDTO">
		SELECT * FROM career WHERE mentor_no = #{mentor_no} ORDER BY entering_date DESC
	</select>
	
	<!--  멘토 학력사항 리스트 -->
	<select id="getEducationList" parameterType="int" resultType="FindMentorInfoDTO">
		SELECT * FROM education WHERE mentor_no = #{mentor_no} ORDER BY entering_date DESC
	</select>
	
	<!--  멘토 자격증 리스트 -->
	<select id="getLicenseList" parameterType="int" resultType="FindMentorInfoDTO">
		SELECT * FROM license WHERE mentor_no = #{mentor_no} ORDER BY issuing_date DESC
	</select>
	
	<!--  멘토링 비용 -->
	<select id="getPayment" parameterType="int" resultType="FindMentorInfoDTO">
		SELECT mentoring_kind,mentoring_fee,service_no FROM service WHERE mentor_no = #{mentor_no} AND available_NY='Y' ORDER BY SUBSTRING(mentoring_kind, 1, 2)
	</select>
	
	<!--  멘토의 리뷰 가져오기  -->
	<select id="getReviewList" parameterType="int" resultType="FindMentorInfoDTO">
		SELECT a.*,m.name,s.* 
		FROM ( 
			SELECT * 
			FROM review JOIN mentoring 
				USING(mentoring_no) WHERE classification=35 
			) a 
		JOIN mentee m 
			USING(mentee_no)  
		JOIN service s 
			USING(service_no) WHERE s.mentor_no = #{mentor_no}   
	</select>
	
	<!-- 멘토의 nuable_date와 mentoring_time을 가져온다.  -->
	<select id="getDayAndTime" parameterType="int" resultType="String">
		select concat(COALESCE(unable_date,''),';',mentoring_time) from mentor where mentor_no = #{mentor_no}
	</select>
	
	
	
	<!--  선택한 시간에 이미 예약된 시간을 list로 리턴한다.  -->
	<select id="getReservedTime" resultType="String">
		SELECT TIME_FORMAT(reserve_date, '%H:%i') AS reserved_time
		FROM mentoring m 
			JOIN service USING (service_no)
				WHERE service_no = (SELECT service_no FROM mentor WHERE mentor_no = #{mentor_no})
					AND DATE_FORMAT(reserve_date, '%m/%d/%Y') = #{reserve_date} AND m.classification = 32
	</select>
	
	<select id="getMentorInfo" parameterType="int" resultType="FindMentorDTO">
		SELECT * FROM mentor JOIN ( 
			SELECT company,task,entering_date 
			FROM career WHERE mentor_no = #{mentor_no} AND entering_date = (
				select max(entering_date) FROM career WHERE mentor_no = #{mentor_no} )
		) sub   
			WHERE mentor_no = #{mentor_no}
	</select>
	
	
	<!-- 북마크 삭제 -->
	<delete id="deleteBookmark">
		DELETE FROM bookmark WHERE 
		mentee_no = (SELECT mentee_no FROM mentee JOIN member 
		USING(member_no) WHERE member_no = #{member_no}) AND mentor_no = #{mentor_no}
	</delete>
	
	
	<!--  북마크 추가 -->
	<insert id="insertBookmark">
		INSERT INTO bookmark(reg_date,mentee_no,mentor_no) 
		VALUES(sysdate(),(
		SELECT mentee_no FROM mentee JOIN member 
		USING(member_no) 
		WHERE member_no = #{member_no}),#{mentor_no}) 
	</insert>
	
	
	<!--  멘티의 깃허브, 블로그 주소를 가져온다.  -->
	<select id="getMenteePortfolio" parameterType="int" resultType="MenteeDTO">
		SELECT * FROM mentee WHERE member_no = #{member_no}
	</select>
	
	<!-- file 테이블의 file_no MAX 값을 가져온다. -->
	<select id="getFileMaxNo" resultType="int">
		SELECT COALESCE(MAX(file_no),0)+1 from file
	</select>
	
	
	<!-- 결제 완료 페이지에서 보여줄 내역을 출력한다. -->
	<select id="getMentoringInfo" resultType="MentoringDTO">
		SELECT * FROM 
		(SELECT * FROM payment 
			JOIN mentoring USING(mentoring_no)) a  
			JOIN service s USING(service_no) WHERE payment_no = #{payment_no}
	</select>
	
	<!-- 멘토에게 멘토링 신청이 들어왔다는 문자 보내기  위한 핸폰 번호 구해오기 -->
	<select id="getPhone" resultType="String">
		SELECT phone from mentor where mentor_no = #{mentor_no}
	</select>
	
	<!--  멘토에게 알림 보내기  -->
	<insert id="sendMentoringApplyalarm" parameterType="MentoringDTO">
	    <selectKey keyColumn="mentee_no,mentor_no" keyProperty="mentee_no,mentor_no" resultType="hashmap" order="BEFORE">
	        SELECT mentee_no,mentor_no
	        FROM  mentoring JOIN service USING(service_no) WHERE mentoring_no = #{mentoring_no}
	    </selectKey>
		    INSERT INTO alarm(title,content,happen_time,read_yn,receiver_mem_no,sender_mem_no) 
			values('새로운 멘토링 신청이 들어왔습니다.','예약일시 3시간 전까지 수락하지 않는 경우 자동 환불됩니다. ',sysdate(),'N',
			(SELECT member_no FROM mentor where mentor_no = #{mentor_no}),
			(SELECT member_no FROM mentee where mentee_no = #{mentee_no}))
	</insert>

</mapper>