<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="connectCode.mapper.MasterDAO">
	<!-- 멘토 전체 데이터 -->
	<select id="getTotal1" parameterType="MentorDTO"
		resultType="int">
		select count(distinct mentor.mentor_no) as count from
		mentor
		left join career on mentor.mentor_no = career.mentor_no
		WHERE
		classification = 22 or
		classification=23 or classification=24
	</select>

	<!-- 멘티 전체 데이터 -->
	<select id="getTotal2" parameterType="MenteeDTO"
		resultType="int">
		select
		count(*) from mentee
	</select>

	<!-- 멘토 승인 요청 리스트 -->
	<select id="mentorlist" resultType="MentorDTO">
		SELECT subquery.*,
		subquery2.number,
		(SELECT (YEAR(NOW()) -
		YEAR(subquery.birthday)) -
		(DATE_FORMAT(subquery.birthday, '%m%d') >
		DATE_FORMAT(NOW(), '%m%d')))
		AS 'age'
		FROM (
		SELECT DISTINCT mentor.*,
		career.years, career.task
		FROM
		mentor
		LEFT JOIN career ON
		mentor.mentor_no = career.mentor_no
		WHERE
		classification = 22 or
		classification=23 or classification=24
		)
		subquery
		JOIN (
		SELECT *,
		row_number() OVER (ORDER BY mentor_no) AS
		number
		FROM
		mentor
		) subquery2
		ON subquery.mentor_no =
		subquery2.mentor_no
		<where>
			<choose>
				<when test="keyword != null and search == 'all'">
					subquery.name LIKE CONCAT('%', #{keyword}, '%')
					or
					subquery.task LIKE CONCAT('%', #{keyword}, '%')
					or subquery.years
					LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test="keyword != null and search == 'wait'">
					subquery.classification = 22 and(
					subquery.name LIKE
					CONCAT('%', #{keyword}, '%')
					or subquery.task LIKE CONCAT('%',
					#{keyword}, '%')
					or subquery.years LIKE CONCAT('%', #{keyword},
					'%'))
				</when>
				<when test="keyword != null and search == 'apply'">
					subquery.classification = 23 and(
					subquery.name LIKE
					CONCAT('%', #{keyword}, '%')
					or subquery.task LIKE CONCAT('%',
					#{keyword}, '%')
					or subquery.years LIKE CONCAT('%', #{keyword},
					'%'))
				</when>
				<when test="keyword != null and search == 'refuse'">
					subquery.classification = 24 and(
					subquery.name LIKE
					CONCAT('%', #{keyword}, '%')
					or subquery.task LIKE CONCAT('%',
					#{keyword}, '%')
					or subquery.years LIKE CONCAT('%', #{keyword},
					'%'))
				</when>
			</choose>
		</where>
		order by
		apply_date desc
		limit #{startRow},
		#{endRow}
	</select>

	<!-- 멘토 상세페이지 -->
	<select id="mentorDetail" parameterType="int"
		resultType="MentorDTO">
		select distinct * from mentor as m left join file as f on
		m.profile_img_no = f.file_no
		left join member as mm on
		mm.member_no=m.member_no
		where
		mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 경력 -->
	<select id="mentorCareer" parameterType="int"
		resultType="MentorDTO">
		select *, entering_date as e_date, departure_date as d_date
		from career where
		mentor_no=#{mentor_no} order by
		e_date
	</select>

	<!-- 멘토 학벌 -->
	<select id="mentorEducation" parameterType="int"
		resultType="MentorDTO">
		select *, entering_date as e_date, graduation_date as
		g_date from education where mentor_no=#{mentor_no} order
		by e_date
	</select>

	<!-- 멘토 자격증 -->
	<select id="mentorLicenseFile" parameterType="int"
		resultType="MentorDTO">
		select * from license as l left join file as f on
		l.file_no=f.file_no where mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 경력 파일 -->
	<select id="mentorCareerFile" parameterType="int"
		resultType="MentorDTO">
		select * from career as c left join file as f on
		c.file_no=f.file_no where mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 학벌 파일 -->
	<select id="mentorEducationFile" parameterType="int"
		resultType="MentorDTO">
		select Distinct e.education_no,f.file_no, f.origin_name,
		f.size from education as e left join file as f on
		e.file_no=f.file_no
		where mentor_no=${mentor_no}
	</select>

	<!-- 멘토 자격증 파일 -->
	<select id="mentorLicense" parameterType="int"
		resultType="MentorDTO">
		select * from license as l left join file as f on
		l.file_no=f.file_no where mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 서비스 -->
	<select id="mentorService" parameterType="int"
		resultType="MentorDTO">
		select * from service where mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 승인완료 업데이트 -->
	<update id="mentorlApplyUpdate" parameterType="MentorDTO">
		update mentor set
		classification=23 where mentor_no=#{mentor_no}
	</update>

	<!-- 멘토 승인거부 업데이트 -->
	<update id="mentorlRefuseUpdate" parameterType="MentorDTO">
		update mentor set
		classification=24 where mentor_no=#{mentor_no}
	</update>
	
	<!-- 멘토 요청 승인 알림 -->
	<insert id="mentorApplyAlarm" parameterType="MentorDTO">
		insert into alarm(title, content, happen_time, read_yn, receiver_mem_no) 
		values('멘토 요청이 승인되었습니다.', '멘토 요청이 승인되었습니다. 활발한 멘토 활동을 기대하겠습니다.', sysdate(), 'N', #{member_no})
	</insert>

	<!-- 멘토 요청 거부 알림 -->
	<insert id="mentorApplyRefuse" parameterType="MentorDTO">
		insert into alarm(title, content, happen_time, read_yn, receiver_mem_no) 
		values('멘토 요청이 거부되었습니다.', '멘토 요청이 거부되었습니다. 프로필을 다시 작성해 주세요.', sysdate(), 'N', #{member_no})
	</insert>

	<!-- 멘티 리스트 -->
	<select id="menteelist" resultType="MentorDTO">
		select * from member left
		join mentee on member.member_no=mentee.member_no where
		mentee.member_no=#{member_no}
	</select>

	<!-- 멘토,멘티 전체 회원 -->
	<select id="totallist" resultType="MentorDTO">
		select *, mentor.name as
		mentor_name, mentee.name as mentee_name from member
		left join mentor on
		member.member_no=mentor.member_no
		left join mentee on
		member.member_no=mentee.member_no
		<where>
			<choose>
				<when test="keyword != null and search == 'all'">
					and mentor.name LIKE CONCAT('%', #{keyword}, '%') || mentee.name LIKE CONCAT('%', #{keyword}, '%')
					or mentor.member_no LIKE CONCAT('%', #{keyword}, '%') || mentee.member_no LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test="keyword != null and search == 'mentor'">
					member.classification=13 and (mentor.name LIKE CONCAT('%', #{keyword}, '%') || mentee.name LIKE CONCAT('%', #{keyword}, '%')
					or mentor.member_no LIKE CONCAT('%', #{keyword}, '%') || mentee.member_no LIKE CONCAT('%', #{keyword}, '%'))
				</when>
				<when test="keyword != null and search == 'mentee'">
					member.classification=12 and (mentor.name LIKE CONCAT('%', #{keyword}, '%') || mentee.name LIKE CONCAT('%', #{keyword}, '%')
					or mentor.member_no LIKE CONCAT('%', #{keyword}, '%') || mentee.member_no LIKE CONCAT('%', #{keyword}, '%'))
				</when>
			</choose>
		</where>
		order by member.member_no desc
		limit
		#{startRow},#{endRow}
	</select>

	<!-- 메일 -->
	<select id="getEmailbyMember" resultType="MentorDTO">
		(select email from
		mentor where member_no=#{email}) union (select email from
		mentee
		where
		member_no=#{email})
	</select>

	<!-- 문의 전체 데이터 -->
	<select id="getPostTotal" parameterType="PostDTO"
		resultType="int">
		select
		count(*) from post where ref_step=0 and board_no=1
	</select>

	<!-- 문의 리스트 -->
	<select id="postlist" resultType="PostDTO">
		select p.*, t.name
		from post p
		join(
		select name, member_no from mentor
		union
		select name, member_no
		from mentee
		) t on p.member_no =
		t.member_no
		where ref_step=0 and board_no=1
		<where>
			<choose> 
				<when test="keyword != null and search == 'all'">
					and (t.name LIKE CONCAT('%', #{keyword}, '%')
					or
					p.title LIKE CONCAT('%', #{keyword}, '%'))
				</when>
<!-- 				<when test="keyword != null and search == 'apply'">
					(ref_step=0 and board_no=1) and(
					subquery.name LIKE
					CONCAT('%', #{keyword}, '%')
					or subquery.task LIKE CONCAT('%',
					#{keyword}, '%')
					or subquery.years LIKE CONCAT('%', #{keyword},
					'%'))
				</when> -->
<!-- 				<when test="keyword != null and search == 'refuse'">
					subquery.classification = 24 and(
					subquery.name LIKE
					CONCAT('%', #{keyword}, '%')
					or subquery.task LIKE CONCAT('%',
					#{keyword}, '%')
					or subquery.years LIKE CONCAT('%', #{keyword},
					'%'))
				</when> -->
			</choose>
		</where>
		order by p.reg_date desc
		limit ${startRow}, #{endRow}
	</select>

	<!-- 문의_상세 -->
	<select id="postDetail" resultType="PostDTO">
		select p.*, t.name
		from post p
		join(
		select name, member_no from mentor
		union
		select name, member_no
		from mentee
		) t on p.member_no = t.member_no
		where post_no=#{post_no}
	</select>

	<!-- db에 저장된 post 가져오기 -->
	<select id="dbpost" resultType="PostDTO">
		select * from post where
		post_no=#{post_no}
	</select>

	<!-- 답변 작성 -->
	<insert id="insertBoard" parameterType="PostDTO">
		insert into
		post(ref_post_no, ref_step, title, content, reg_date, reply_yn,
		member_no, board_no)
		values(#{ref_post_no},1,'답변입니다.',#{content},sysdate(),'Y',#{member_no},1)
	</insert>

	<!-- 답변 업데이트 -->
	<update id="UpdateBoard" parameterType="PostDTO">
		update post set
		reply_yn='Y' where post_no=#{post_no}
	</update>

	<!-- 멤버 상세정보 -->
	<!-- <select id="memberDetail" resultType="MentorDTO"> select name, member_no 
		from mentor union select name, member_no from mentee </select> -->

	<!-- 신고 미처리 총 데이터 -->
	<!-- <select id="getReport" resultType="int"> select count(*) from report 
		where classification = 42 or classification = 43 </select> -->

	<!-- 신고 처리 총 데이터 -->
	<!-- <select id="getReport" resultType="int"> select count(*) from report 
		where classification = 36 or classification = 41 </select> -->

	<!-- 신고 목록_미처리 -->
	<!-- <select id="reportUncomplete" resultType="ReportDTO"> select report.*, 
		mentoring.mentee_no, mentoring.service_no, service.mentor_no, mentor.name 
		as mentor_name, mentee.name as mentee_name, CASE WHEN report.classification 
		= '36' THEN '환불' WHEN report.classification = '41' THEN '철회' WHEN report.classification 
		= '42' THEN '멘토미처리' WHEN report.classification = '43' THEN '멘토처리' ELSE '' 
		END AS report_state, row_number() OVER (ORDER BY report_no) AS number from 
		report left join mentoring on report.mentoring_no = mentoring.mentoring_no 
		left join service on mentoring.service_no = service.service_no left join 
		mentor on service.mentor_no = mentor.mentor_no left join mentee on mentoring.mentee_no 
		= mentee.mentee_no where report.classification = 42 or report.classification 
		= 43 order by report_no desc limit #{startRow}, #{endRow} </select> -->
	<!-- 신고 목록_처리 -->
	<!-- <select id="reportComplete" resultType="ReportDTO"> select report.*, 
		mentoring.mentee_no, mentoring.service_no, service.mentor_no, mentor.name 
		as mentor_name, mentee.name as mentee_name, CASE WHEN report.classification 
		= '36' THEN '환불' WHEN report.classification = '41' THEN '철회' WHEN report.classification 
		= '42' THEN '멘토미처리' WHEN report.classification = '43' THEN '멘토처리' ELSE '' 
		END AS report_state, row_number() OVER (ORDER BY report_no) AS number from 
		report left join mentoring on report.mentoring_no = mentoring.mentoring_no 
		left join service on mentoring.service_no = service.service_no left join 
		mentor on service.mentor_no = mentor.mentor_no left join mentee on mentoring.mentee_no 
		= mentee.mentee_no where report.classification = 36 or report.classification 
		= 41 order by report_no desc limit #{startRow}, #{endRow} </select> -->

	<!-- 멘토 신고수 -->
	<select id="mentorReport" resultType="int">
		select count(*) as count
		from report as r left join mentoring as ming on
		r.mentoring_no=ming.mentoring_no
		left join service as s on
		s.service_no=ming.service_no where r.classification in (36, 42, 43)
		and s.mentor_no=#{mentor_no}
	</select>

	<!-- 멘토 멘토링 + 리뷰 -->
	<select id="mentorEtc" resultType="MentorDTO">
		select * from mentoring left
		join report on mentoring.mentoring_no=report.mentoring_no
	</select>

	<!-- 멘티 멘토링 -->
	<select id="menteeMentoring" resultType="MenteeDTO">
		select * from mentee
		left join mentoring on mentee.mentee_no=mentoring.mentee_no where
		mentee.mentee_no=#{mentee_no}
	</select>

	<!-- 멘티 정보 구해오기 -->
	<select id="menteeDelete" resultType="MenteeDTO">
		select * from mentee left
		join member on mentee.member_no=member.member_no where
		mentee.member_no=#{member_no}
	</select>

	<!-- 멘토 탈퇴 테이블 인서트 -->
	<insert id="mmDelUpdate" parameterType="int">
		insert into quit_member
		values(sysdate(),'관리자 권한으로 탈퇴',#{member_no})
	</insert>

	<!-- 멘티 탈퇴 -->
	<update id="mmDelete" parameterType="int">
		update member set
		classification=14 where member_no=#{member_no}
	</update>

	<!-- 멘토 리뷰수 -->
	<select id="mentorReview" resultType="int">
		select count(*) as count
		from review as r left join mentoring as ming on
		r.mentoring_no=ming.mentoring_no
		left join service as s on
		s.service_no=ming.service_no where
		s.mentor_no=#{mentor_no}
	</select>

	<!-- 멘토링 평균 -->
	<select id="mentorAVG" resultType="double">
		select ifnull(avg(rating),0)
		from review
		as r left join mentoring as ming on
		r.mentoring_no=ming.mentoring_no
		left join service as s on
		s.service_no=ming.service_no where
		s.mentor_no=#{mentor_no}
	</select>

	<!-- 신고 총 데이터 -->
	<select id="getReport" resultType="int">
		select count(*) from report
	</select>

	<!-- 신고 목록 -->
	<select id="reportList" resultType="ReportDTO">
		select *, mor.name as
		mentor_name, mee.name as mentee_name, r.classification as report_state
		from report as r
		left join mentoring as m on
		r.mentoring_no=m.mentoring_no
		left join service as s on
		s.service_no=m.service_no
		left join mentor as mor on
		s.mentor_no=mor.mentor_no
		left join mentee as mee on
		m.mentee_no=mee.mentee_no order by report_no
		desc limit #{startRow},
		#{endRow}
	</select>

	<!-- 신고 상세 내역 -->
	<select id="reportDetail" resultType="ReportDTO">
		select *, mor.name as
		mentor_name, mee.name as mentee_name, r.classification as report_state
		from report as r
		left join mentoring as m on
		r.mentoring_no=m.mentoring_no
		left join service as s on
		s.service_no=m.service_no
		left join mentor as mor on
		s.mentor_no=mor.mentor_no
		left join mentee as mee on
		m.mentee_no=mee.mentee_no
		where r.report_no=#{report_no}
	</select>

	<!-- 파일 정보 -->
	<select id="file" resultType="FileDTO">
		select education_no, f.file_no,
		file_serial_number, mentor_no, file_serial_number, origin_name,
		file_url, extension, size from education
		as e
		left join file as f on
		e.file_no=f.file_no where e.file_no=#{file_no} and
		file_serial_number=#{file_serial_number}
	</select>

	<select id="efile" resultType="MentorDTO">
		select * from file as f left join
		education as e on
		e.file_no=f.file_no where f.file_no=#{file_no}
	</select>


	<!-- 결제 총 데이터 -->
	<select id="getPay" resultType="int">
		select count(*) from payment
	</select>

	<!-- 결제 리스트 -->
	<select id="paylist" resultType="PaymentDTO">
		select * from payment order by
		pay_time desc limit #{startRow}, #{endRow}
	</select>

	<!-- 신고 철회 -->
	<update id="reportCancle" parameterType="int">
		update report set
		classification=41 where report_no=#{report_no}
	</update>

	<!-- 새로운 문의요청 -->
	<select id="newinquire" resultType="int">
		select count(*) from post
		where reply_yn='N'
	</select>

	<!-- 새로운 신고건수 -->
	<select id="newReport" resultType="int">
		select count(*) from report
		where classification in(42,43)
	</select>

	<!-- 새로운 멘토요청 -->
	<select id="newMentor" resultType="int">
		select count(*) from mentor
		where classification = 22
	</select>

	<!-- 오늘 발생한 신고 -->
	<select id="newPay" resultType="int">
		select count(*) from payment
		where date(pay_time) = curdate();
	</select>

	<!-- 통계  -->
	<select id="getMale" resultType="int">
		select count(gender) from mentor
		where gender='male'
	</select>

	<select id="getFemale" resultType="int">
		select count(gender) from
		mentor where gender='female'
	</select>

	<select id="geteemale" resultType="int">
		select count(gender) from
		mentee where gender='male'
	</select>

	<select id="geteefemale" resultType="int">
		select count(gender) from
		mentee where gender='female'
	</select>

	<select id="getTmale" resultType="int">
		select count(gender) as
		total_male
		from(
		select gender from mentor
		where gender='male'
		union all
		select gender from mentee
		where gender='male') as m_total
	</select>

	<select id="getTfemale" resultType="int">
		select count(gender) as
		total_female
		from(
		select gender from mentor
		where gender='female'
		union
		all
		select gender from mentee
		where gender='female') as m_total
	</select>

	<select id="getsign_up" resultType="int">
		select count(*) from member
		where year(reg_date)=year(current_date()) and
		month(reg_date)=month(current_date())
	</select>

	<select id="getlastsign_up" resultType="int">
		SELECT COUNT(*) FROM
		member
		WHERE YEAR(reg_date) = YEAR(CURRENT_DATE() - INTERVAL 1 MONTH)
		AND MONTH(reg_date) = MONTH(CURRENT_DATE() - INTERVAL 1 MONTH)
	</select>

	<select id="getTsign_up" resultType="int">
		select count(*) from member
		where year(reg_date)=year(current_date()) 
	</select>

	<select id="getquit" resultType="int">
		select count(*) from quit_member
		where year(quit_date)=year(current_date()) and
		month(quit_date)=month(current_date())
	</select>

	<select id="getlastquit" resultType="int">
		SELECT COUNT(*) FROM quit_member
		WHERE YEAR(quit_date) = YEAR(CURRENT_DATE() - INTERVAL 1 MONTH)
		AND MONTH(quit_date) = MONTH(CURRENT_DATE() - INTERVAL 1 MONTH)
	</select>

	<select id="getTquit" resultType="int">
		select count(*) from
		quit_member
		where year(quit_date)=year(current_date())
	</select>




	<!-- *****************************병걸 작성*************************************** -->

	<insert id="insertVisitorInfo">
		<selectKey keyProperty="visit_id" order="BEFORE"
			resultType="int">
			SELECT IFNULL(MAX(visit_id), 0)+1 FROM visitor
		</selectKey>
		INSERT INTO visitor (visit_ip, visit_time, visit_refer, visit_agent)
		VALUES (#{visit_ip}, SYSDATE(), #{visit_refer}, #{visit_agent})
	</insert>

	<update id="updateExitTime">
		UPDATE visitor SET exit_time = SYSDATE() WHERE
		visit_id = #{visit_id}
	</update>

	<select id="getTotalVisitors" resultType="int">
		SELECT COUNT(*) FROM
		visitor
	</select>
	<select id="getTodayVisitors" resultType="int">
		SELECT COUNT(*) FROM
		visitor WHERE DATE_FORMAT(visit_time, '%Y-%m-%d') = DATE_FORMAT(NOW(),
		'%Y-%m-%d')
	</select>
	<select id="getMentors" resultType="int">
		SELECT COUNT(*) FROM member
		WHERE classification=13;
	</select>
	<select id="getMentees" resultType="int">
		SELECT COUNT(*) FROM member
		WHERE classification=12;
	</select>
	<select id="getUnreadyMentors" resultType="int">
		SELECT COUNT(*) FROM
		mentor INNER JOIN member ON(mentor.member_no = member.member_no) WHERE
		member.classification=13 AND (mentor.classification=21 OR
		mentor.classification=22);
	</select>
	<select id="getReadyMentors" resultType="int">
		SELECT COUNT(*) FROM
		mentor INNER JOIN member ON(mentor.member_no = member.member_no) WHERE
		member.classification=13 AND mentor.classification=23;
	</select>

	<!-- *****************************병걸 작성*************************************** -->

</mapper>